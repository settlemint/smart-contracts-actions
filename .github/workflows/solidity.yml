name: SettleMint Smart Contract Set Solidity Workflow

on:
  workflow_call:
    inputs:
      docker-image-name:
        required: true
        type: string
      runs-on:
        required: false
        type: string
        default: ubuntu-latest
    secrets:
      TOKEN:
        required: true
      ANVIL_TESTS_PRIVATE_KEY:
        required: false

env:
  SUBGRAPH_EXISTS: 'false'
  FOUNDRY_PROFILE: ci

jobs:
  codescanning:
    name: Code Scanning
    runs-on: namespace-profile-${{ inputs.runs-on }}
    container:
      image: returntocorp/semgrep
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Fetch semgrep rules
        uses: actions/checkout@v4
        with:
          repository: decurity/semgrep-smart-contracts
          path: rules
      - run: semgrep ci --sarif --output=semgrep.sarif || true
        env:
          SEMGREP_RULES: rules/solidity/security rules/solidity/performance

      - uses: crytic/slither-action@v0.4.0
        id: slither
        with:
          sarif: slither.sarif
          fail-on: none
          slither-args: --filter-paths "lib/"
          solc-version: 0.8.26

      - name: Upload findings to GitHub Advanced Security Dashboard
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
        if: always()

      - name: Upload findings to GitHub Advanced Security Dashboard
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.slither.outputs.sarif }}
        if: always()
  check:
    services:
      foundry:
        image: ghcr.io/settlemint/btp-anvil-test-node:latest
        ports:
          - "8545:8545"
    name: Check
    runs-on: namespace-profile-${{ inputs.runs-on }}
    steps:
      - name: Checkout
        uses: namespacelabs/nscloud-checkout-action@v2
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Run Forge build
        run: |
          forge --version
          forge build --sizes
        id: build

      - name: Run Forge tests
        run: |
          forge test -vvv
        id: test

      - name: Setup LCOV
        if: github.event_name == 'pull_request'
        uses: hrishikesh-kadam/setup-lcov@v1

      - name: Run Forge Coverage
        if: github.event_name == 'pull_request'
        run: |
          forge coverage --report lcov --report summary
        id: coverage

      - name: Run an anvil deployment
        run: |
          make deploy-anvil
          cp deployment-anvil.txt deployment.txt
        env:
          ANVIL_TESTS_PRIVATE_KEY: ${{ secrets.ANVIL_TESTS_PRIVATE_KEY }}

      - name: Check if subgraph folder exists
        id: check_subgraph
        run: echo "SUBGRAPH_EXISTS=$(if [ -d subgraph ]; then echo true; else echo false; fi)" >> $GITHUB_ENV

      - name: Install npm dependencies for subgraph
        if: env.SUBGRAPH_EXISTS == 'true'
        working-directory: subgraph
        run: |
          npm install

      - name: Install YQ
        if: env.SUBGRAPH_EXISTS == 'true'
        uses: alexellis/arkade-get@master
        with:
          print-summary: false
          yq: latest

      - name: Build the subgraph
        if: env.SUBGRAPH_EXISTS == 'true'
        run: |
          make subgraph
        env:
          ANVIL_TESTS_PRIVATE_KEY: ${{ secrets.ANVIL_TESTS_PRIVATE_KEY }}
          BTP_RPC_URL: http://localhost:8545
          BTP_NODE_UNIQUE_NAME: anvil

      - name: Report code coverage
        if: github.event_name == 'pull_request'
        uses: zgosalvez/github-actions-report-lcov@v4.1.8
        with:
          coverage-files: lcov.info
          minimum-coverage: 90
          github-token: ${{ secrets.TOKEN }}
          update-comment: true
  docker:
    if: github.event_name != 'pull_request'
    needs:
      - codescanning
      - check
    name: Docker
    runs-on: namespace-profile-${{ inputs.runs-on }}
    steps:
      - name: Checkout
        uses: namespacelabs/nscloud-checkout-action@v2
        with:
          submodules: recursive

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.TOKEN }}

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/settlemint/${{ inputs.docker-image-name }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v5
        id: build-and-push
        with:
          platforms: linux/amd64,linux/arm64
          provenance: true
          sbom: true
          push: true
          load: false
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          no-cache: true

      - name: Sign the images with GitHub OIDC Token
        env:
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
          TAGS: ${{ steps.docker_meta.outputs.tags }}
        run: |
          images=""
          for tag in ${TAGS}; do
            images+="${tag}@${DIGEST} "
          done
          cosign sign --yes ${images}
